import pandas as pd
import numpy as np
from sklearn.cluster import KMeans
import matplotlib.pyplot as plt
from collections import Counter

# Load the dataset
# Assuming you have the dataset in CSV format; replace 'your_file.csv' with the actual file name.
# For the image, you might have to convert it to a CSV or read the data manually into a DataFrame.
df = pd.read_csv('your_file.csv')  # Replace with your actual file path

# Convert 'timestamp Grp 1' to total seconds since start of the day
df['timestamp_seconds'] = pd.to_timedelta(df['timestamp Grp 1']).dt.total_seconds()

# Replace 'Grp 1 Amount' and 'timestamp_seconds' columns' NaN values with zeros (if any)
df['Grp 1 Amount'].fillna(0, inplace=True)
df['timestamp_seconds'].fillna(0, inplace=True)

# Preprocess counterparties (cpty Grp 1 column) if it contains string representations of lists
df['cpty Grp 1'] = df['cpty Grp 1'].apply(eval)  # Convert string to list (if needed)

# Prepare the features for clustering
X = df[['timestamp_seconds', 'Grp 1 Amount']]

# Apply KMeans clustering
kmeans = KMeans(n_clusters=3, random_state=0)  # You can adjust the number of clusters
df['cluster'] = kmeans.fit_predict(X)

# Analyze the clusters
# 1. Calculate the time range (from when to when) and average amount for each cluster
cluster_summary = df.groupby('cluster').agg(
    time_min=('timestamp_seconds', 'min'),          # Minimum time in cluster
    time_max=('timestamp_seconds', 'max'),          # Maximum time in cluster
    avg_amount=('Grp 1 Amount', 'mean'),            # Average amount in cluster
)

# Convert seconds back to time format for better readability
cluster_summary['time_min'] = pd.to_datetime(cluster_summary['time_min'], unit='s').dt.strftime('%H:%M:%S')
cluster_summary['time_max'] = pd.to_datetime(cluster_summary['time_max'], unit='s').dt.strftime('%H:%M:%S')

# 2. Identify the most prevalent counterparties in each cluster
most_prevalent_counterparties = {}

for cluster in df['cluster'].unique():
    # Get the counterparties in the current cluster
    cluster_data = df[df['cluster'] == cluster]['cpty Grp 1']
    
    # Flatten the list of counterparties
    all_counterparties = []
    for counterparties in cluster_data:
        all_counterparties.extend(counterparties)  # Flattening the list of counterparties
    
    # Count the frequency of each counterparty
    counterparty_count = Counter(all_counterparties)
    
    # Get the most common counterparties (top 5)
    most_prevalent_counterparties[cluster] = counterparty_count.most_common(5)

# 3. Add the prevalent counterparties to the cluster summary
cluster_summary['most_prevalent_counterparties'] = cluster_summary.index.map(lambda x: most_prevalent_counterparties[x])

# 4. Calculate the range or criteria for differentiating clusters
# Calculate the time and amount range for each cluster
cluster_summary['time_range'] = cluster_summary['time_min'] + " to " + cluster_summary['time_max']
cluster_summary['amount_range'] = df.groupby('cluster')['Grp 1 Amount'].agg(lambda x: (x.max() - x.min()))

# Display the summary of the clusters
print("Cluster Summary:")
print(cluster_summary)

# Plot the clusters to visualize them
plt.scatter(df['timestamp_seconds'], df['Grp 1 Amount'], c=df['cluster'], cmap='viridis')
plt.title('K-Means Clustering of Events by Time and Negative Amount')
plt.xlabel('Time of Day (seconds)')
plt.ylabel('Grp 1 Amount')
plt.colorbar(label='Cluster')
plt.show()

