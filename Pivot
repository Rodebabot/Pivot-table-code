import pandas as pd

# Load the dataset
df = pd.read_excel('path_to_your_dataset.xlsx')  # Replace with actual file path

# Step 1: Calculate the absolute value of 'Amount USD' to properly bifurcate based on n and nn
df['Abs_Amount_USD'] = df['Amount USD'].abs()

# Step 2: Group by 'Entity' and 'net' to calculate total 'Amount USD' at the Entity level
entity_grouped = df.groupby(['Entity', 'net']).agg(
    Total_Amount_USD=('Abs_Amount_USD', 'sum'),
    Count=('Unique', 'nunique')  # Count of unique 'Unique' values at the Entity level
).reset_index()

# Step 3: Calculate the total 'Amount USD' for each Entity to compute percentages
entity_totals = entity_grouped.groupby('Entity')['Total_Amount_USD'].sum().reset_index()
entity_totals = entity_totals.rename(columns={'Total_Amount_USD': 'Total_Entity_Amount_USD'})

# Merge the total 'Amount USD' back to the grouped DataFrame
entity_grouped = pd.merge(entity_grouped, entity_totals, on='Entity')

# Step 4: Calculate percentage of 'n' and 'nn' based on 'Total_Amount_USD'
entity_grouped['Percentage'] = (entity_grouped['Total_Amount_USD'] / entity_grouped['Total_Entity_Amount_USD']) * 100

# Pivot the data so that we have separate columns for 'n' and 'nn' percentages for each Entity
pivot_entity = entity_grouped.pivot(index='Entity', columns='net', values='Percentage').reset_index()

# Rename columns for better clarity
pivot_entity.columns = ['Entity', 'Percentage_n', 'Percentage_nn']

# Step 5: Calculate frequency distributions of various variables (optional step)
# Here we can calculate the distribution of any other column, for example, 'Currency' or 'Our SSI'
currency_distribution = df.groupby(['Entity', 'Currency']).size().reset_index(name='Frequency')
our_ssi_distribution = df.groupby(['Entity', 'Our SSI']).size().reset_index(name='Frequency')

# Merge these distributions back to the pivot table if needed
entity_with_distributions = pd.merge(pivot_entity, currency_distribution, on='Entity', how='left')
entity_with_distributions = pd.merge(entity_with_distributions, our_ssi_distribution, on='Entity', how='left')

# Save the final output to an Excel file for further analysis
entity_with_distributions.to_excel('Entity_Frequency_Distributions.xlsx', index=False)

print("Entity-level percentage and frequency distributions saved to 'Entity_Frequency_Distributions.xlsx'.")

