import pandas as pd

# Assuming df is the dataframe containing your data

# Step 1: Calculate days spent in 'Counterparty to Action'
df = df.sort_values(by=['Unique Eventid', 'Age'])

# Function to calculate days spent in each ROC
def calculate_days_spent(group):
    group['Days Spent'] = group['Age'].diff().shift(-1).fillna(0)
    return group

df = df.groupby('Unique Eventid').apply(calculate_days_spent)

# Step 2: Filter the dataset for ROC 'Counterparty to Action' and days spent > 5
filtered_df = df[(df['ROC'] == 'counterpartytoaction') & (df['Days Spent'] > 5)]

# Step 3: Count the number of unique Event IDs for each Counterparty
counterparty_eventid_count = df.groupby('Counterparty Name')['Unique Eventid'].nunique().reset_index()
counterparty_eventid_count.columns = ['Counterparty Name', 'Total Unique Event IDs']

# Step 4: Count the number of unique Event IDs where 'Counterparty to Action' spent days > 5
breach_eventid_count = filtered_df.groupby('Counterparty Name')['Unique Eventid'].nunique().reset_index()
breach_eventid_count.columns = ['Counterparty Name', 'Breach Event IDs']

# Merge the counts to get a combined view
result = pd.merge(counterparty_eventid_count, breach_eventid_count, on='Counterparty Name', how='left').fillna(0)
result['Breach Event IDs'] = result['Breach Event IDs'].astype(int)

# Step 5: Identify the product representations where the 5 days threshold is mostly exceeded
product_representations = filtered_df.groupby(['Counterparty Name', 'Product Representation']).size().reset_index(name='Count')
product_representations = product_representations.sort_values(by='Count', ascending=False).groupby('Counterparty Name').first().reset_index()

# Merge with the result to add the most prevalent Product Representation for breaches
final_result = pd.merge(result, product_representations[['Counterparty Name', 'Product Representation']], on='Counterparty Name', how='left')

# Final output
final_result = final_result.sort_values(by='Breach Event IDs', ascending=False)
final_result.columns = ['Counterparty Name', 'Total Unique Event IDs', 'Breach Event IDs > 5 Days', 'Most Frequent Product Representation for Breaches']

# Display the final result
print(final_result)

